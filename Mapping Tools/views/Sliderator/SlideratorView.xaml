<local:SingleRunMappingTool x:Uid="This" x:Class="Mapping_Tools.Views.Sliderator.SlideratorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Mapping_Tools.Views"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:graph="clr-namespace:Mapping_Tools.Components.Graph"
             xmlns:domain="clr-namespace:Mapping_Tools.Components.Domain"
             xmlns:objectVisualiser="clr-namespace:Mapping_Tools.Components.ObjectVisualiser"
             mc:Ignorable="d" 
             x:Name="This"
             Loaded="SlideratorView_OnLoaded"
             d:DesignHeight="450" Width="759.5" d:DataContext="{d:DesignData SlideratorVm}">
    <local:SingleRunMappingTool.Resources>
        <domain:DoubleToStringConverter x:Uid="domain:DoubleToStringConverter_1" x:Key="DoubleToStringConverter"/>
        <domain:TimeToStringConverter x:Uid="domain:TimeToStringConverter_1" x:Key="TimeToStringConverter"/>
    </local:SingleRunMappingTool.Resources>
    <Grid x:Uid="MasterGrid" Name="MasterGrid">
        <Grid.RowDefinitions>
            <RowDefinition x:Uid="RowDefinition_1" Height="Auto"/>
            <RowDefinition x:Uid="RowDefinition_2" Height="*"/>
            <RowDefinition x:Uid="RowDefinition_3" Height="Auto"/>
        </Grid.RowDefinitions>

        <StackPanel x:Uid="StackPanel_1" Grid.Row="0" Orientation="Horizontal">
            <TextBlock x:Uid="TextBlock_1" FontSize="40" FontWeight="Bold" Foreground="{DynamicResource PrimaryHueMidBrush}">
                <Run x:Uid="Run_1" Text="Sliderator"/>
            </TextBlock>
            <materialDesign:PopupBox x:Uid="materialDesign:PopupBox_1" Margin="10" VerticalAlignment="Bottom" ToolTip="Click me!">
                <materialDesign:PopupBox.ToggleContent>
                    <materialDesign:PackIcon x:Uid="materialDesign:PackIcon_1" Kind="HelpCircle" Width="24" Height="24" Foreground="{DynamicResource SecondaryAccentBrush}"/>
                </materialDesign:PopupBox.ToggleContent>
                <TextBlock x:Uid="TextBlock_2" TextWrapping="Wrap" MaxWidth="600" Padding="5">
                    Sliderator is a tool meant to make sliders with variable velocity. That means sliders that change speed during the animation. You can also make variable velocity streams with this tool.
                    <LineBreak x:Uid="LineBreak_1"/>
                    <LineBreak x:Uid="LineBreak_2"/>
                    The UI consists of a slider import section, some options, a position/velocity graph, and a slider preview.
                    <LineBreak x:Uid="LineBreak_3"/>
                    <LineBreak x:Uid="LineBreak_4"/>
                    To get started, simply import one or more sliders using the 'Import sliders' button. Use any of the three different import methods from the dropdown menu.
                    <LineBreak x:Uid="LineBreak_5"/>
                    <LineBreak x:Uid="LineBreak_6"/>
                    The most important element is the position/velocity graph. This is where you tell Sliderator what you want your slider animation to look like. You can toggle between position and velocity mode by clicking the accent colored button below.
                    <LineBreak x:Uid="LineBreak_7"/>
                    Add, remove, or edit anchors with right click and move stuff by dragging with left click. While dragging, hold Shift for horizontal clipping, hold Ctrl for vertical clipping, and hold Alt to disable snapping.
                    <LineBreak x:Uid="LineBreak_8"/>
                    <LineBreak x:Uid="LineBreak_9"/>
                    Running Sliderator with a constant velocity will give back the original slider. You can manually choose a lower SV and bigger tumour length to optimise your slider.
                    <LineBreak x:Uid="LineBreak_10"/>
                    <LineBreak x:Uid="LineBreak_11"/>
                    Check out all the options. The tooltips should help you further.
                </TextBlock>
            </materialDesign:PopupBox>
            <materialDesign:PopupBox x:Uid="materialDesign:PopupBox_2" Margin="0,10,10,10" VerticalAlignment="Bottom" ToolTip="Click me!">
                <materialDesign:PopupBox.ToggleContent>
                    <materialDesign:PackIcon x:Uid="materialDesign:PackIcon_2" Kind="LightningBoltCircle" Width="24" Height="24" Foreground="{DynamicResource PrimaryHueLightBrush}"/>
                </materialDesign:PopupBox.ToggleContent>
                <TextBlock x:Uid="TextBlock_3" TextWrapping="Wrap" MaxWidth="600" Padding="5">
                    This tool is compatible with QuickRun!
                </TextBlock>
            </materialDesign:PopupBox>
        </StackPanel>

        <Grid x:Uid="FirstGrid" Name="FirstGrid" Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition x:Uid="RowDefinition_4" Height="2*"/>
                <RowDefinition x:Uid="RowDefinition_5" Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Uid="ColumnDefinition_1" Width="*" MinWidth="200"/>
                <ColumnDefinition x:Uid="ColumnDefinition_2" Width="*"/>
                <ColumnDefinition x:Uid="ColumnDefinition_3" Width="*"/>
                <ColumnDefinition x:Uid="ColumnDefinition_4" Width="90"/>
            </Grid.ColumnDefinitions>

            <graph:Graph x:Uid="Graph" Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="3" x:Name="Graph" MinMarkerSpacing="20"
                         Margin="43 0 0 43" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                         MaxX="{Binding GraphBeats, Mode=TwoWay}"/>

            <materialDesign:Card x:Uid="materialDesign:Card_1" Grid.Column="2" Grid.Row="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0" Padding="10"
                                 ToolTip="Result preview">
                <objectVisualiser:HitObjectElement x:Uid="GraphHitObjectElement" x:Name="GraphHitObjectElement" Width="200" HitObject="{Binding VisibleHitObject}"
                                                   Stroke="YellowGreen" Fill="DarkSlateGray" SliderBallStroke="White" Thickness="50"/>
            </materialDesign:Card>

            <ScrollViewer x:Uid="ScrollViewer_1" Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" Margin="0 10 0 0" VerticalScrollBarVisibility="Auto">
                    <StackPanel x:Uid="StackPanel_2">
                    <Grid x:Uid="Grid_1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Uid="ColumnDefinition_5" Width="*"/>
                            <ColumnDefinition x:Uid="ColumnDefinition_6" Width="Auto"/>
                            <ColumnDefinition x:Uid="ColumnDefinition_7" Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ComboBox x:Uid="ComboBox_1" Grid.Column="0" ItemsSource="{Binding ImportModes}" SelectedItem="{Binding ImportModeSetting}" Margin="0 0 5 0"
                                  ToolTip="Import mode"/>

                        <TextBox x:Uid="TextBox_1" Grid.Column="1" Text="{Binding TimeCode}" Visibility="{Binding TimeCodeBoxVisibility}" Margin="5 0 5 2" Width="100"
                                 materialDesign:HintAssist.Hint="Time code"
                                 ToolTip="Input a time code here. Example time code: 00:56:823 (1,2,1,2) - "/>

                        <Button x:Uid="Button_1" Grid.Column="2" Style="{StaticResource MaterialDesignRaisedButton}" Command="{Binding ImportCommand}" Margin="5 0 0 0"
                                ToolTip="Import sliders into the preview." HorizontalAlignment="Right" VerticalAlignment="Top">
                            Import sliders
                        </Button>
                    </Grid>
                    <Grid x:Uid="Grid_2" Margin="0 10 0 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Uid="ColumnDefinition_8" Width="Auto"/>
                            <ColumnDefinition x:Uid="ColumnDefinition_9" Width="*"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock x:Uid="TextBlock_4" Grid.Column="0" Text="{Binding LoadedHitObjects.Count, StringFormat={}Loaded {0} slider(s)}"/>

                        <StackPanel x:Uid="StackPanel_3" Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
                            <Button x:Uid="Button_2" Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}" Margin="0 0 5 0"
                                    Command="{Binding MoveLeftCommand}"
                                    ToolTip="Go to previous slider. Hold Shift for quick run before going to previous slider.">
                                <Button.Content>
                                    <materialDesign:PackIcon x:Uid="materialDesign:PackIcon_3" Kind="KeyboardArrowLeft" Width="24" Height="24"/>
                                </Button.Content>
                            </Button>
                            <Button x:Uid="Button_3" Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}"
                                    Command="{Binding MoveRightCommand}"
                                    ToolTip="Go to next slider. Hold Shift for quick run before going to next slider.">
                                <Button.Content>
                                    <materialDesign:PackIcon x:Uid="materialDesign:PackIcon_4" Kind="KeyboardArrowRight" Width="24" Height="24"/>
                                </Button.Content>
                            </Button>
                        </StackPanel>
                    </Grid>
                    <Grid x:Uid="Grid_3" Margin="0 10 0 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Uid="ColumnDefinition_10" Width="*"/>
                            <ColumnDefinition x:Uid="ColumnDefinition_11" Width="*"/>
                            <ColumnDefinition x:Uid="ColumnDefinition_12" Width="*"/>
                        </Grid.ColumnDefinitions>

                        <TextBox x:Uid="TextBox_2" Grid.Column="0" Margin="0 0 10 0" materialDesign:HintAssist.Hint="Beat length" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                                 ToolTip="Duration of the slider in beats.">
                            <TextBox.Text>
                                <Binding x:Uid="Binding_1" Path="GraphBeats" Mode="TwoWay" UpdateSourceTrigger="LostFocus"  NotifyOnValidationError="True">
                                    <Binding.Converter>
                                        <domain:DoubleToStringConverter x:Uid="domain:DoubleToStringConverter_2"/>
                                    </Binding.Converter>
                                    <Binding.ValidationRules>
                                        <domain:IsLessOrEqualValidationRule x:Uid="domain:IsLessOrEqualValidationRule_1">
                                            <domain:IsLessOrEqualValidationRule.ValueWrapper>
                                                <domain:DoubleWrapper x:Uid="domain:DoubleWrapper_1" Value="10000"/>
                                            </domain:IsLessOrEqualValidationRule.ValueWrapper>
                                        </domain:IsLessOrEqualValidationRule>
                                        <domain:IsGreaterOrEqualValidationRule x:Uid="domain:IsGreaterOrEqualValidationRule_1">
                                            <domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                                <domain:DoubleWrapper x:Uid="domain:DoubleWrapper_2" Value="0"/>
                                            </domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                        </domain:IsGreaterOrEqualValidationRule>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                        <TextBox x:Uid="TextBox_3" Grid.Column="1" Margin="0 0 10 0" materialDesign:HintAssist.Hint="BPM" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                                 ToolTip="The BPM at which this slider gets played.">
                            <TextBox.Text>
                                <Binding x:Uid="Binding_2" Path="BeatsPerMinute" Mode="TwoWay" UpdateSourceTrigger="LostFocus" NotifyOnValidationError="True">
                                    <Binding.Converter>
                                        <domain:DoubleToStringConverter x:Uid="domain:DoubleToStringConverter_3"/>
                                    </Binding.Converter>
                                    <Binding.ValidationRules>
                                        <domain:IsGreaterValidationRule x:Uid="domain:IsGreaterValidationRule_1">
                                            <domain:IsGreaterValidationRule.ValueWrapper>
                                                <domain:DoubleWrapper x:Uid="domain:DoubleWrapper_3" Value="0"/>
                                            </domain:IsGreaterValidationRule.ValueWrapper>
                                        </domain:IsGreaterValidationRule>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                        <TextBox x:Uid="TextBox_4" Grid.Column="2" Margin="0" materialDesign:HintAssist.Hint="Global SV" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                                 ToolTip="The Global Slider Velocity at which this slider gets played.">
                            <TextBox.Text>
                                <Binding x:Uid="Binding_3" Path="GlobalSv" Mode="TwoWay" UpdateSourceTrigger="LostFocus" NotifyOnValidationError="True">
                                    <Binding.Converter>
                                        <domain:DoubleToStringConverter x:Uid="domain:DoubleToStringConverter_4"/>
                                    </Binding.Converter>
                                    <Binding.ValidationRules>
                                        <domain:IsLessOrEqualValidationRule x:Uid="domain:IsLessOrEqualValidationRule_2">
                                            <domain:IsLessOrEqualValidationRule.ValueWrapper>
                                                <domain:DoubleWrapper x:Uid="domain:DoubleWrapper_4" Value="3.6"/>
                                            </domain:IsLessOrEqualValidationRule.ValueWrapper>
                                        </domain:IsLessOrEqualValidationRule>
                                        <domain:IsGreaterOrEqualValidationRule x:Uid="domain:IsGreaterOrEqualValidationRule_2">
                                            <domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                                <domain:DoubleWrapper x:Uid="domain:DoubleWrapper_5" Value="0.4"/>
                                            </domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                        </domain:IsGreaterOrEqualValidationRule>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                    </Grid>

                    <TextBox x:Uid="TextBox_5" Margin="0 20 0 0" materialDesign:HintAssist.Hint="Time" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                             ToolTip="The time in the current beatmap to export the sliderated slider to."
                             Text="{Binding ExportTime, Converter={StaticResource TimeToStringConverter}}"/>

                    <ComboBox x:Uid="ComboBox_2" Margin="0 10 0 0" ToolTip="Choose how you want to export sliders." ItemsSource="{Binding ExportModes}"
                              SelectedItem="{Binding ExportModeSetting}"/>

                    <CheckBox x:Uid="CheckBox_1" Content="Export as stream instead" Margin="0 10 0 0"
                              ToolTip="Instead of exporting a slider, export an accelerating stream instead. This stream uses the beat snap divisor."
                              IsChecked="{Binding ExportAsStream}"/>

                    <CheckBox x:Uid="ManualSvBox" x:Name="ManualSvBox" Content="Manually choose new SV" Margin="0 10 0 5"
                              ToolTip="Allows you to manually choose the SV for the sliderator algorithm and optimise the resulting slider."
                              IsChecked="{Binding ManualVelocity}"/>
                    <TextBox x:Uid="TextBox_6" materialDesign:HintAssist.Hint="New SV" Style="{StaticResource MaterialDesignFloatingHintTextBox}" Margin="0 0 0 5"
                             ToolTip="The new SV for the sliderated slider. This SV influences the Sliderator algorithm. Use lower SV for less lag."
                             IsEnabled="{Binding ManualVelocity}">
                        <TextBox.Text>
                            <Binding x:Uid="Binding_4" Path="NewVelocity" Mode="TwoWay" UpdateSourceTrigger="LostFocus"  NotifyOnValidationError="True">
                                <Binding.Converter>
                                    <domain:DoubleToStringConverter x:Uid="domain:DoubleToStringConverter_5"/>
                                </Binding.Converter>
                                <Binding.ValidationRules>
                                    <domain:IsGreaterOrEqualValidationRule x:Uid="domain:IsGreaterOrEqualValidationRule_3">
                                        <domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                            <domain:DoubleWrapper x:Uid="domain:DoubleWrapper_6" Value="0"/>
                                        </domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                    </domain:IsGreaterOrEqualValidationRule>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <TextBox x:Uid="TextBox_7" materialDesign:HintAssist.Hint="Minimum tumour length" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                             ToolTip="Minimum length for tumours which slow down the sliderball in the sliderated slider. Longer tumours result in less lag but a more shaky sliderball.">
                        <TextBox.Text>
                            <Binding x:Uid="Binding_5" Path="MinDendrite" Mode="TwoWay" UpdateSourceTrigger="LostFocus"  NotifyOnValidationError="True">
                                <Binding.Converter>
                                    <domain:DoubleToStringConverter x:Uid="domain:DoubleToStringConverter_6"/>
                                </Binding.Converter>
                                <Binding.ValidationRules>
                                    <domain:IsLessOrEqualValidationRule x:Uid="domain:IsLessOrEqualValidationRule_3">
                                        <domain:IsLessOrEqualValidationRule.ValueWrapper>
                                            <domain:DoubleWrapper x:Uid="domain:DoubleWrapper_7" Value="12"/>
                                        </domain:IsLessOrEqualValidationRule.ValueWrapper>
                                    </domain:IsLessOrEqualValidationRule>
                                    <domain:IsGreaterOrEqualValidationRule x:Uid="domain:IsGreaterOrEqualValidationRule_4">
                                        <domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                            <domain:DoubleWrapper x:Uid="domain:DoubleWrapper_8" Value="1"/>
                                        </domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                    </domain:IsGreaterOrEqualValidationRule>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>

                    <StackPanel x:Uid="StackPanel_4" Orientation="Horizontal" Margin="0 10 0 0">
                        <TextBlock x:Uid="TextBlock_5" Text="Expected segment count: "
                                   ToolTip="This is the estimated segment count for your result. More segments means more lag, so try to optimise this value."/>
                        <TextBlock x:Uid="TextBlock_6" Text="{Binding ExpectedSegments}"
                                   ToolTip="This is the estimated segment count for your result. More segments means more lag, so try to optimise this value."/>
                    </StackPanel>

                    <CheckBox x:Uid="DelegateSvToBpmBox" x:Name="DelegateSvToBpmBox" Content="Delegate SV to BPM" Margin="0 15 0 0"
                              ToolTip="Use BPM to determine the velocity of the resulting slider instead of greenline SV."
                              IsChecked="{Binding DelegateToBpm}"/>
                    <CheckBox x:Uid="CheckBox_2" Content="Remove slider ticks"
                              ToolTip="Use a NaN greenline to remove slider ticks from the resulting slider."
                              IsEnabled="{Binding DelegateToBpm}"
                              IsChecked="{Binding RemoveSliderTicks}"/>
                </StackPanel>
            </ScrollViewer>

            <Grid x:Uid="Grid_4" Grid.Row="1" Grid.Column="1" Margin="10 0 10 0">
                <Grid.RowDefinitions>
                    <RowDefinition x:Uid="RowDefinition_6" Height="Auto"/>
                    <RowDefinition x:Uid="RowDefinition_7" Height="Auto"/>
                    <RowDefinition x:Uid="RowDefinition_8" Height="Auto"/>
                </Grid.RowDefinitions>

                <Grid x:Uid="Grid_5" Grid.Row="0" Margin="8 0 8 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Uid="ColumnDefinition_13" Width="*"/>
                        <ColumnDefinition x:Uid="ColumnDefinition_14" Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <TextBox x:Uid="TextBox_8" Grid.Column="0" Margin="0 0 8 0" HorizontalAlignment="Left"
                             materialDesign:HintAssist.Hint="SV limit" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                             MaxWidth="140" MinWidth="100"
                             ToolTip="Self-imposed SV limit to help you make sure the slope in the graph doesn't become greater than this speed limit. For example use 10x SV limit to match the osu! speed limit.">
                        <TextBox.Text>
                            <Binding x:Uid="Binding_6" Path="VelocityLimit" Mode="TwoWay" Converter="{StaticResource DoubleToStringConverter}" ConverterParameter="10" UpdateSourceTrigger="LostFocus"  NotifyOnValidationError="True">
                                <Binding.ValidationRules>
                                    <domain:IsLessOrEqualValidationRule x:Uid="domain:IsLessOrEqualValidationRule_4">
                                        <domain:IsLessOrEqualValidationRule.ValueWrapper>
                                            <domain:DoubleWrapper x:Uid="domain:DoubleWrapper_9" Value="100000"/>
                                        </domain:IsLessOrEqualValidationRule.ValueWrapper>
                                    </domain:IsLessOrEqualValidationRule>
                                    <domain:IsGreaterOrEqualValidationRule x:Uid="domain:IsGreaterOrEqualValidationRule_5">
                                        <domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                            <domain:DoubleWrapper x:Uid="domain:DoubleWrapper_10" Value="0"/>
                                        </domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                    </domain:IsGreaterOrEqualValidationRule>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>

                    <StackPanel x:Uid="StackPanel_5" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                        <Button x:Uid="Button_4" Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}" Margin="0 0 5 0"
                                ToolTip="Scale graph to completion." Click="ScaleCompleteButton_OnClick">
                            <Button.Content>
                                <materialDesign:PackIcon x:Uid="materialDesign:PackIcon_5" Kind="RelativeScale" Width="24" Height="24"/>
                            </Button.Content>
                        </Button>
                        <Button x:Uid="Button_5" Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}" Margin="0 0 5 0"
                                ToolTip="Reset graph." Click="ClearButton_OnClick">
                            <Button.Content>
                                <materialDesign:PackIcon x:Uid="materialDesign:PackIcon_6" Kind="Rocket" Width="24" Height="24"/>
                            </Button.Content>
                        </Button>
                        <Button x:Uid="Button_6" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Margin="5 0 0 0"
                                ToolTip="Toggle graph mode." Command="{Binding GraphToggleCommand}">
                            <Button.Content>
                                <Viewbox x:Uid="Viewbox_1" Width="24" Height="24">
                                    <TextBlock x:Uid="GraphToggleContentTextBlock" x:Name="GraphToggleContentTextBlock" FontWeight="Bold">V</TextBlock>
                                </Viewbox>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </Grid>

                <Slider x:Uid="Slider_1" Grid.Row="1" Minimum="1" Maximum="16" Value="{Binding BeatSnapDivisor}" Style="{StaticResource MaterialDesignDiscreteSlider}"
                        ToolTip="Beat snap divisor."/>

                <ToolBarOverflowPanel x:Uid="ToolBarOverflowPanel_1" HorizontalAlignment="Left" Grid.Row="2" Margin="5 10 5 0">
                    <CheckBox x:Uid="CheckBox_3" IsChecked="{Binding ShowRedAnchors}" Content="Show red anchors" Margin="0 0 5 0"
                              ToolTip="Show the positions of red anchors in the graph and preview."/>
                    <CheckBox x:Uid="CheckBox_4" IsChecked="{Binding ShowGraphAnchors}" Content="Show graph anchors"
                              ToolTip="Show the positions of graph anchors in the preview."/>
                </ToolBarOverflowPanel>
            </Grid>

            <Viewbox x:Uid="Viewbox_2" Grid.Row="1" Grid.Column="3" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="70">
                <Button
                    x:Uid="Button_7" Style="{StaticResource MaterialDesignFloatingActionButton}"
                    IsEnabled="{Binding ElementName=This, Path=CanRun}"
                    Click="Start_Click"
                    ToolTip="Run this tool.">
                    <materialDesign:PackIcon
                        x:Uid="materialDesign:PackIcon_7" Kind="Play" Height="36" Width="36" />
                </Button>
            </Viewbox>
        </Grid>

        <Grid x:Uid="SecondGrid" Name="SecondGrid" Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Uid="ColumnDefinition_15" Width="Auto"/>
                <ColumnDefinition x:Uid="ColumnDefinition_16" Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid x:Uid="Grid_6" Grid.Column="0">
                <WrapPanel x:Uid="WrapPanel_1" VerticalAlignment="Bottom">
                    <TextBlock x:Uid="TextBlock_7" TextWrapping="NoWrap" Text="Made by OliBomby &amp; Karoo" FontWeight="Bold" Opacity="0.58"/>
                </WrapPanel>
            </Grid>
            <Grid x:Uid="Grid_7" Grid.Column="1">
                <ProgressBar x:Uid="ProgressBar_1" Value="{Binding ElementName=This, Path=Progress}" Margin="20,0,20,0" Height="20" Background="{x:Null}" BorderBrush="{x:Null}"/>
            </Grid>
        </Grid>
    </Grid>
</local:SingleRunMappingTool>
